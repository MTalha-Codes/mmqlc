%YAML 1.2

file_extensions:
  - mmql
scope: source.example-mmql
contexts:
  main:
    # Comments begin with a '%%' and finish at the end of the line
    - match: '%%'
      scope: punctuation.definition.comment.example-mmql
      push: line_comment
    # Regular Real Double argumented Keywords/queries of mmql language
    - match: '\b(ADD)|(SUBTRACT)|(MULTIPLY)|(DIVIDE)|(PERMUTATION)|(COMBINATION)|(LOGARITHM)|(POWER)|(MODULUS)|(ROOT)\b'
      scope: keyword.real_double.example-mmql
    # Match Real Single Argumented Keywords\queries 
    - match: '\b(SINE)|(COSINE)|(TANGENT)|(COTANGENT)|(SECANT)|(COSECANT)|(INVERSE_TANGENT)|(INVERSE_COTANGENT)|(INVERSE_COSECANT)|(INVERSE_SECANT)|(INVERSE_COSINE)|(INVERSE_SINE) |(HYP_SINE)|(HYP_COSINE)|(HYP_TANGENT)|(HYP_COTANGENT)|(HYP_SECANT)|(HYP_COSECANT)|(INVERSE_HYP_SINE)|(INVERSE_HYP_SECANT)|(INVERSE_HYP_COSECANT)|(INVERSE_HYP_COTANGENT)|(INVERSE_HYP_COSINE)|(INVERSE_HYP_TANGENT)|(FACTORIAL)|(FLOOR)|(CEILING)|(ABSOLUTE)|(NATURAL_LOGARITHM)|(COMMON_LOGARITHM)|(BINARY_LOGARITHM)\b'
      scope: keyword.real_single.example-mmql
    - match: '\b(CMPLX_ADD)|(CMPLX_SUBTRACT)|(CMPLX_MULTIPLY)|(CMPLX_DIVIDE)|(CMPLX_POWER)|(CMPLX_ROOT)\b'
      scope: keyword.cmplx_double.example-mmql
    - match: '\b(CMPLX_SINE)|(CMPLX_COSINE)|(CMPLX_TANGENT)|(CMPLX_COTANGENT)|(CMPLX_SECANT)|(CMPLX_COSECANT)|(CMPLX_INVERSE_TANGENT)|(CMPLX_INVERSE_COSINE)|(CMPLX_INVERSE_SINE)|(CMPLX_INVERSE_COTANGENT)|(CMPLX_INVERSE_SECANT)|(CMPLX_INVERSE_COSECANT)|(CMPLX_HYP_SINE)|(CMPLX_HYP_COSINE)|(CMPLX_HYP_TANGENT)|(CMPLX_HYP_SECANT)|(CMPLX_HYP_COSECANT)|(CMPLX_HYP_COTANGENT)|(CMPLX_INVERSE_HYP_SINE)|(CMPLX_INVERSE_HYP_COSINE)|(CMPLX_INVERSE_HYP_TANGENT)|(CMPLX_INVERSE_HYP_SECANT)|(CMPLX_INVERSE_HYP_COSECANT)|(CMPLX_INVERSE_HYP_COTANGENT)|(CMPLX_MODULUS)|(CMPLX_NATURAL_LOGARITHM)\b'
      scope: keyword.cmplx_single.example-mmql
    # Match numbers whether complex or real
    - match: '\b(-?\d+(\.\d+)?)|(-?\d+(\.\d+)?[+-]\d+(\.\d+)?(i))\b'
      scope: constant.numeric.example-mmql
  line_comment:
    - meta_scope: comment.line.example-mmql
    - match: $
      pop: true
